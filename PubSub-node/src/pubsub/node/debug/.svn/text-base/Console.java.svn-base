package pubsub.node.debug;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;

/**
 *
 * @author John Gasparis
 */
public class Console extends javax.swing.JFrame {

    private Command command;

    /** Creates new form Console */
    public Console() {
        super("PSI - Console");
        initComponents();

        command = new Command();

        jTextAreaCLI.setText("psi ~ $ ");

        setSize(new Dimension(600, 600));
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screen.width / 2) - (this.getWidth() / 2);
        int y = (screen.height / 2) - (this.getHeight() / 2);
        this.setLocation(x, y);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setResizable(false);
        this.setVisible(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCLI = new javax.swing.JTextArea();
        jTextFieldCom = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextAreaCLI.setColumns(20);
        jTextAreaCLI.setRows(5);
        jTextAreaCLI.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaCLI);

        jTextFieldCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldComActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
            .addComponent(jTextFieldCom, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldComActionPerformed
        // TODO add your handling code here:
        String text = jTextFieldCom.getText();
        String cli = jTextAreaCLI.getText();
        String com = "psi ~ $ ";

        if (text.equals("")) {
            return;
        } else if (text.equals(Command.CLEAR)) {
            jTextAreaCLI.setText(cli + "clear \n" + com);
        } else if (text.equals(Command.QUIT)) {
            System.exit(0);
        } else if (text.equals(Command.SHOW_TOPOLOGY_S)) {
            String res = command.showTopologyS();
            jTextAreaCLI.setText(cli + "show topology -s\n" + res + "\n" + com);
        } else if (text.equals(Command.SHOW_TOPOLOGY_G)) {
            command.showTopologyG();
            jTextAreaCLI.setText(cli + "show topology -g\n" + com);
        } else if (text.equals(Command.HELP)) {
            jTextAreaCLI.setText(cli + "help \n" + com);
        } else if (text.equals(Command.SHOW_HOSTS_G)) {
            command.showHostsG();
            jTextAreaCLI.setText(cli + "show hosts -g\n" + com);
        } else if (text.equals(Command.SHOW_HOSTS_S)) {
            String res = command.showHostsS();
            jTextAreaCLI.setText(cli + "show hosts -s\n" + res + "\n" + com);
        }
        else {
            jTextAreaCLI.setText(cli + text + "\ncommand not found\n" + com);
        }

        jTextFieldCom.setText("");
    }//GEN-LAST:event_jTextFieldComActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.command.closeLocRCClient();
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaCLI;
    private javax.swing.JTextField jTextFieldCom;
    // End of variables declaration//GEN-END:variables
}
